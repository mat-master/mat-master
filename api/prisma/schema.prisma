generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://api:vLc%5E%3F%2AQvP%3F0~F%5ES%3Ef%22r%2C2m%3F%60DC%5C%5B4Txo%3FBAII8%2Bt%22%3AJ~%2F@dev-db.cwmhht230lam.us-west-1.rds.amazonaws.com:5432/dev"
}

model addresses {
  id          BigInt    @id
  state       String    @db.VarChar(2)
  city        String    @db.VarChar(50)
  postal_code String    @db.VarChar(50)
  line_1      String    @db.VarChar(100)
  line_2      String?   @db.VarChar(100)
  schools     schools[]
}

model attendance {
  student  BigInt
  class    BigInt
  date     DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
  metadata Json     @db.Json
  classes  classes  @relation(fields: [class], references: [id])
  students students @relation(fields: [student], references: [id])

  @@id([student, class, date])
}

model classes {
  id                 BigInt               @id
  school             BigInt
  name               String               @db.VarChar(100)
  schedule           Json[]               @db.Json
  schools            schools              @relation(fields: [school], references: [id])
  attendance         attendance[]
  membership_classes membership_classes[]
}

model invites {
  school  BigInt
  email   String  @db.VarChar(150)
  schools schools @relation(fields: [school], references: [id])

  @@id([school, email])
}

model kiosks {
  school  BigInt  @id
  pin     String  @db.VarChar(50)
  schools schools @relation(fields: [school], references: [id])
}

model membership_classes {
  membership  BigInt
  class       BigInt
  classes     classes     @relation(fields: [class], references: [id])
  memberships memberships @relation(fields: [membership], references: [id])

  @@id([membership, class])
}

model memberships {
  id                  BigInt                @id
  school              BigInt?
  name                String                @db.VarChar(100)
  stripe_price_id     String                @db.VarChar(50)
  schools             schools?              @relation(fields: [school], references: [id])
  membership_classes  membership_classes[]
  student_memberships student_memberships[]
}

model schools {
  id                     BigInt        @id
  owner                  BigInt?
  name                   String        @db.VarChar(100)
  address                BigInt?
  tier                   Int           @db.SmallInt
  stripe_account_id      String        @db.VarChar(50)
  stripe_subscription_id String        @db.VarChar(50)
  addresses              addresses?    @relation(fields: [address], references: [id])
  users                  users?        @relation(fields: [owner], references: [id])
  classes                classes[]
  invites                invites[]
  kiosks                 kiosks?
  memberships            memberships[]
  students               students[]
}

model student_memberships {
  student                BigInt
  membership             BigInt
  stripe_subscription_id String      @db.VarChar(150)
  memberships            memberships @relation(fields: [membership], references: [id])
  students               students    @relation(fields: [student], references: [id])

  @@id([student, membership, stripe_subscription_id])
}

model students {
  id                  BigInt                @id
  school              BigInt
  user                BigInt
  stripe_customer_id  String                @db.VarChar(50)
  schools             schools               @relation(fields: [school], references: [id])
  users               users                 @relation(fields: [user], references: [id])
  attendance          attendance[]
  student_memberships student_memberships[]
}

model users {
  id                 BigInt     @id
  first_name         String     @db.VarChar(50)
  last_name          String     @db.VarChar(50)
  email              String     @db.VarChar(150)
  password           String     @db.VarChar(200)
  privilege          Int        @db.SmallInt
  avatar             BigInt?
  stripe_customer_id String?    @db.VarChar(50)
  schools            schools[]
  students           students[]
}

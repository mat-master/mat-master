datasource db {
  provider = "postgresql"
  url      = "postgresql://api:vLc%5E%3F%2AQvP%3F0~F%5ES%3Ef%22r%2C2m%3F%60DC%5C%5B4Txo%3FBAII8%2Bt%22%3AJ~%2F@dev-db.cwmhht230lam.us-west-1.rds.amazonaws.com:5432/dev"
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider    = "zod-prisma"
  output      = "./src/generated/models"
  modelCase   = "camelCase"
  modelSuffix = "RowSchema"
}

model User {
  id            BigInt  @id
  firstName     String  @map("first_name") @db.VarChar(50)
  lastName      String  @map("last_name") @db.VarChar(50)
  email         String  @unique @db.VarChar(150)
  emailVerified Boolean @default(false) @map("email_verified")
  password      String  @db.VarChar(200)
  avatar        BigInt?

  stripeCustomerId String? @map("stripe_customer_id") @db.VarChar(50)

  schools  School[]
  students Student[]
}

enum SchoolTier {
  Trial
  Basic
  Premium
}

model School {
  id                   BigInt     @id
  name                 String     @db.VarChar(100)
  tier                 SchoolTier @default(Trial)
  stripeAccountId      String     @map("stripe_account_id") @db.VarChar(50)
  stripeSubscriptionId String     @map("stripe_subscription_id") @db.VarChar(50)

  address Address?

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId BigInt @map("owner_id")

  classes     Class[]
  memberships Membership[]
  invites     Invite[]
  students    Student[]
  kiosks      Kiosk[]
}

model Address {
  id         BigInt  @id
  state      String  @db.VarChar(2)
  city       String  @db.VarChar(50)
  postalCode String  @map("postal_code") @db.VarChar(50)
  line1      String  @map("line_1") @db.VarChar(100)
  line2      String? @map("line_2") @db.VarChar(100)

  school   School @relation(fields: [schoolId], references: [id])
  schoolId BigInt @unique @map("school_id")
}

model Class {
  id   BigInt @id
  name String @db.VarChar(50)

  school   School @relation(fields: [schoolId], references: [id])
  schoolId BigInt @map("school_id")

  memberships Membership[]
  schedule    ClassTime[]
}

model ClassTime {
  id BigInt @id

  scheduleStart DateTime  @default(now()) @map("schedule_start")
  scheduleEnd   DateTime? @map("schedule_end")

  repeatMonth Int? @map("repeat_month")
  repeatWeek  Int? @map("repeat_week")
  repeatDay   Int? @map("repeat_day")
  repeatDate  Int? @map("repeat_date")

  startTime DateTime @map("start_time") @db.Timetz()
  duration  Int

  class   Class  @relation(fields: [classId], references: [id])
  classId BigInt @map("class_id")

  attendances Attendance[]
}

model Membership {
  id              BigInt @id
  name            String @db.VarChar(100)
  stripeProductId String @map("stripe_product_id") @db.VarChar(100)

  school   School @relation(fields: [schoolId], references: [id])
  schoolId BigInt @map("school_id")

  classes  Class[]
  students StudentMembership[]
}

model StudentMembership {
  stripeSubscriptionId String @id @map("stripe_subscription_id") @db.VarChar(150)

  student   Student @relation(fields: [studentId], references: [id])
  studentId BigInt  @map("student_id")

  membership   Membership @relation(fields: [membershipId], references: [id])
  membershipId BigInt     @map("membership_id")
}

model Student {
  id BigInt @id

  school   School @relation(fields: [schoolId], references: [id])
  schoolId BigInt @map("school_id")

  user   User   @relation(fields: [userId], references: [id])
  userId BigInt @map("user_id")

  stripeCustomerId String @map("stripe_customer_id") @db.VarChar(50)

  attendance  Attendance[]
  memberships StudentMembership[]
}

model Invite {
  school   School @relation(fields: [schoolId], references: [id])
  schoolId BigInt @map("school_id")

  email String @db.VarChar(150)

  @@id([schoolId, email])
}

model Kiosk {
  id  BigInt @id
  pin String @db.VarChar(50)

  school   School @relation(fields: [schoolId], references: [id])
  schoolId BigInt @map("school_id")
}

model Attendance {
  student   Student @relation(fields: [studentId], references: [id])
  studentId BigInt  @map("student_id")

  classTime   ClassTime @relation(fields: [classTimeId], references: [id], map: "class_time")
  classTimeId BigInt    @map("class_time_id")

  date DateTime @default(now())

  @@id([studentId, classTimeId, date])
}

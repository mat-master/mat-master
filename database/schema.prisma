datasource db {
  provider = "postgresql"
  url      = "postgresql://api:vLc%5E%3F%2AQvP%3F0~F%5ES%3Ef%22r%2C2m%3F%60DC%5C%5B4Txo%3FBAII8%2Bt%22%3AJ~%2F@dev-db.cwmhht230lam.us-west-1.rds.amazonaws.com:5432/dev"
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider    = "zod-prisma"
  output      = "./src/generated/models"
  modelCase   = "camelCase"
  modelSuffix = "RowSchema"
}

enum UserPrivilege {
  Unverified
  Verified
  Admin
}

model User {
  id        BigInt  @id
  firstName String  @map("first_name") @db.VarChar(50)
  lastName  String  @map("last_name") @db.VarChar(50)
  email     String  @unique @db.VarChar(150)
  password  String  @db.VarChar(200)
  avatar    BigInt?

  privilege        UserPrivilege
  stripeCustomerId String?       @map("stripe_customer_id") @db.VarChar(50)

  schools  School[]
  students Student[]
}

enum SchoolTier {
  Trial
  Basic
  Premium
}

model School {
  id                   BigInt @id
  name                 String @db.VarChar(100)
  tier                 Int    @db.SmallInt
  stripe_account_id    String @db.VarChar(50)
  stripeSubscriptionId String @map("stripe_subscription_id") @db.VarChar(50)

  address Address?

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId BigInt @map("owner_id")

  classes     Class[]
  memberships Membership[]
  invites     Invite[]
  students    Student[]
  kiosks      Kiosk[]
}

model Address {
  id         BigInt  @id
  state      String  @db.VarChar(2)
  city       String  @db.VarChar(50)
  postalCode String  @map("postal_code") @db.VarChar(50)
  line1      String  @map("line_1") @db.VarChar(100)
  line2      String? @map("line_2") @db.VarChar(100)

  school   School @relation(fields: [schoolId], references: [id])
  schoolId BigInt @unique @map("school_id")
}

model Class {
  id         BigInt       @id
  name       String       @db.VarChar(50)
  schedule   Json[]       @db.Json
  attendance Attendance[]

  school   School @relation(fields: [schoolId], references: [id])
  schoolId BigInt @map("school_id")

  memberships Membership[]
}

model Membership {
  id            BigInt @id
  name          String @db.VarChar(100)
  stripePriceId String @map("stripe_price_id") @db.VarChar(50)

  school   School @relation(fields: [schoolId], references: [id])
  schoolId BigInt @map("school_id")

  classes  Class[]
  students StudentMembership[]
}

model StudentMembership {
  student   Student @relation(fields: [studentId], references: [id])
  studentId BigInt  @map("student_id")

  membership   Membership @relation(fields: [membershipId], references: [id])
  membershipId BigInt     @map("membership_id")

  stripeSubscriptionId String @map("stripe_subscription_id") @db.VarChar(150)

  @@id([studentId, membershipId])
}

model Student {
  id BigInt @id

  school   School @relation(fields: [schoolId], references: [id])
  schoolId BigInt @map("school_id")

  user   User   @relation(fields: [userId], references: [id])
  userId BigInt @map("user_id")

  stripeCustomerId String @map("stripe_customer_id") @db.VarChar(50)

  attendance  Attendance[]
  memberships StudentMembership[]
}

model Invite {
  school   School @relation(fields: [schoolId], references: [id])
  schoolId BigInt @map("school_id")
  email    String @db.VarChar(150)

  @@id([schoolId, email])
}

model Kiosk {
  school   School @relation(fields: [schoolId], references: [id])
  schoolId BigInt @id @map("school_id")
  pin      String @db.VarChar(50)
}

model Attendance {
  student   Student @relation(fields: [studentId], references: [id])
  studentId BigInt  @map("student_id")

  class   Class  @relation(fields: [classId], references: [id])
  classId BigInt @map("class_id")

  date     DateTime @default(now()) @db.Date
  metadata Json     @db.Json

  @@id([studentId, classId, date])
}
